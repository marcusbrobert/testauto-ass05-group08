{
	"info": {
		"_postman_id": "31433df3-6e0c-404c-b753-2d4a44571dfe",
		"name": "Swagger Pet Store API Testing",
		"description": "This is a collection of API tests for [https://petstore.swagger.io](https://petstore.swagger.io) .",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25444643",
		"_collection_link": "https://dark-astronaut-245616.postman.co/workspace/Testautomatisering-ASS05~dc20ef48-d873-4d36-a17b-2e25dcfdb414/collection/7085663-31433df3-6e0c-404c-b753-2d4a44571dfe?action=share&source=collection_link&creator=25444643"
	},
	"item": [
		{
			"name": "pet",
			"item": [
				{
					"name": "status",
					"item": [
						{
							"name": "findByStatusAvailable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Status code is: \" + pm.response.code + \" \" + pm.response.status);\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"console.log(\"Content-Type is: \" + pm.response.headers.get(\"Content-Type\"));\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"console.log(\"Response time is: \" + pm.response.responseTime + \" ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/pet/findByStatus?status=available",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "findByStatusPending",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Status code is: \" + pm.response.code + \" \" + pm.response.status);\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"console.log(\"Content-Type is: \" + pm.response.headers.get(\"Content-Type\"));\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"console.log(\"Response time is: \" + pm.response.responseTime + \" ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/pet/findByStatus?status=pending",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "pending"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "findByStatusSold",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(\"Status code is: \" + pm.response.code + \" \" + pm.response.status);\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"console.log(\"Content-Type is: \" + pm.response.headers.get(\"Content-Type\"));\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"console.log(\"Response time is: \" + pm.response.responseTime + \" ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/pet/findByStatus?status=sold",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "sold"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "findByStatusInvalidStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 if not one of [available, pending, sold] \", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"console.log(\"Status code is: \" + pm.response.code + \" \" + pm.response.status);\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"console.log(\"Content-Type is: \" + pm.response.headers.get(\"Content-Type\"));\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"console.log(\"Response time is: \" + pm.response.responseTime + \" ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/pet/findByStatus?status=InvalidStatus",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "InvalidStatus"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "GET requests that finds pets by their status in the Swagger Petstore.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "addPet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.to.have.status).to.be.oneOf([200, 201]);\r",
									"});\r",
									"console.log(\"Status code is: \" + pm.response.code + \" \" + pm.response.status);\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"console.log(\"Content-Type is: \" + pm.response.headers.get(\"Content-Type\"));\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"console.log(\"Response time is: \" + pm.response.responseTime + \" ms\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "special-key",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 100,\r\n  \"category\": {\r\n    \"id\": 100,\r\n    \"name\": \"Cat\"\r\n  },\r\n  \"name\": \"Telle\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 100,\r\n      \"name\": \"Cat\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/pet",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"pet"
							]
						},
						"description": "Adds"
					},
					"response": []
				},
				{
					"name": "updatePet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"    console.log(\"Status code is: \" + pm.response.code + \" \" + pm.response.status);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"console.log(\"Content-Type is: \" + pm.response.headers.get(\"Content-Type\"));\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"console.log(\"Response time is: \" + pm.response.responseTime + \" ms\");\r",
									"\r",
									"if(pm.response.code === 200) \r",
									"{\r",
									"    pm.test(\"Response body structure is valid\", function () {\r",
									"        var responseJSON = pm.response.json();\r",
									"        \r",
									"        // Check if the response contains the required properties\r",
									"        pm.expect(responseJSON).to.have.property('id');\r",
									"        pm.expect(responseJSON).to.have.property('category');\r",
									"        pm.expect(responseJSON).to.have.property('name');\r",
									"        pm.expect(responseJSON).to.have.property('photoUrls');\r",
									"        pm.expect(responseJSON).to.have.property('tags');\r",
									"        pm.expect(responseJSON).to.have.property('status');\r",
									"        console.log(\"Response contains the required properties: id, category, name, photoUrls, tags and status!\");\r",
									"\r",
									"        // Check the structure of the 'category' object\r",
									"        pm.expect(responseJSON.category).to.be.an('object').that.has.property('id');\r",
									"        pm.expect(responseJSON.category).to.be.an('object').that.has.property('name');\r",
									"        console.log(\"Response contains the required category objects: id and name!\");\r",
									"\r",
									"        // Check the structure of the 'tags' array\r",
									"        responseJSON.tags.forEach(function (tag) {\r",
									"            pm.expect(tag).to.be.an('object').that.has.property('id');\r",
									"            pm.expect(tag).to.be.an('object').that.has.property('name');\r",
									"            console.log(\"Response contains the required tags objects: id and name!\")\r",
									"        });\r",
									"\r",
									"        // Check the structure of the 'photoUrls' array\r",
									"        pm.expect(responseJSON.photoUrls).to.be.an('array');\r",
									"        console.log(\"Response contains the required photoUrls array!\")\r",
									"    });\r",
									"} else \r",
									"{\r",
									"    console.warn(\"Unexpected status code: \" + pm.response.code + \" \" + pm.response.status);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"doggie\",\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/pet",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "findPetById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404])\r",
									"});\r",
									"\r",
									"if(pm.response.code === 200) \r",
									"{\r",
									"    pm.test(\"Response body structure is valid\", function () {\r",
									"        var responseJSON = pm.response.json();\r",
									"        \r",
									"        // Check if the response contains the required properties\r",
									"        pm.expect(responseJSON).to.have.property('id');\r",
									"        pm.expect(responseJSON).to.have.property('category');\r",
									"        pm.expect(responseJSON).to.have.property('name');\r",
									"        pm.expect(responseJSON).to.have.property('photoUrls');\r",
									"        pm.expect(responseJSON).to.have.property('tags');\r",
									"        pm.expect(responseJSON).to.have.property('status');\r",
									"\r",
									"        // Check the structure of the 'category' object\r",
									"        pm.expect(responseJSON.category).to.be.an('object').that.has.property('id');\r",
									"        pm.expect(responseJSON.category).to.be.an('object').that.has.property('name');\r",
									"\r",
									"        // Check the structure of the 'tags' array\r",
									"        responseJSON.tags.forEach(function (tag) {\r",
									"            pm.expect(tag).to.be.an('object').that.has.property('id');\r",
									"            pm.expect(tag).to.be.an('object').that.has.property('name');\r",
									"        });\r",
									"\r",
									"        // Check the structure of the 'photoUrls' array\r",
									"        pm.expect(responseJSON.photoUrls).to.be.an('array');\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/pet/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"pet",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "updatePetFormData",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "PellePlutt",
									"type": "text"
								},
								{
									"key": "status",
									"value": "DEAD",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BASE_URL}}/pet/100",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"pet",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePet",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "special-key",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/pet/100",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"pet",
								"100"
							]
						}
					},
					"response": []
				}
			],
			"description": "Requests in the /pet/ path"
		},
		{
			"name": "store",
			"item": [
				{
					"name": "deleteOrder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/store/order/123456789101112131",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"store",
								"order",
								"123456789101112131"
							]
						}
					},
					"response": []
				},
				{
					"name": "orderPet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 1234567891011121314,\r\n  \"petId\": 100,\r\n  \"quantity\": 1,\r\n  \"shipDate\": \"2023-09-06T12:21:51.004Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/store/order",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "getOrderById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if(pm.response.code === 200) \r",
									"{\r",
									"    pm.test(\"Response body structure is valid\", function () {\r",
									"        var responseJSON = pm.response.json();\r",
									"        pm.expect(responseJSON).to.be.an('object').that.has.all.keys('id', 'petId', 'quantity', 'shipDate', 'status', 'complete');\r",
									"        console.log(\"Reponse contains the required properties.\")\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/store/order/1234567891011121314",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"store",
								"order",
								"1234567891011121314"
							]
						}
					},
					"response": []
				},
				{
					"name": "getInventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/store/inventory",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"store",
								"inventory"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "createUser",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"ville\",\r\n  \"firstName\": \"Ville\",\r\n  \"lastName\": \"Gillstrom\",\r\n  \"email\": \"ville.asd@gmail.com\",\r\n  \"password\": \"123\",\r\n  \"phone\": \"848475\",\r\n  \"userStatus\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/user",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "findUserByName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/user/ville",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user",
								"ville"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateExistingUserInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"ville\",\r\n  \"firstName\": \"David\",\r\n  \"lastName\": \"Pascua\",\r\n  \"email\": \"david@hotmail.com\",\r\n  \"password\": \"hejsan123\",\r\n  \"phone\": \"0700000000\",\r\n  \"userStatus\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/user/ville",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user",
								"ville"
							]
						}
					},
					"response": []
				},
				{
					"name": "loginUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/user/login?username=ville&password=123",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "ville"
								},
								{
									"key": "password",
									"value": "123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "logoutUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/user/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "removeUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/user/ville",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user",
								"ville"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}