{
	"info": {
		"_postman_id": "31433df3-6e0c-404c-b753-2d4a44571dfe",
		"name": "Swagger Pet Store API Testing",
		"description": "This is a collection of API tests for [https://petstore.swagger.io](https://petstore.swagger.io) .",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25444643",
		"_collection_link": "https://dark-astronaut-245616.postman.co/workspace/Testautomatisering-ASS05~dc20ef48-d873-4d36-a17b-2e25dcfdb414/collection/7085663-31433df3-6e0c-404c-b753-2d4a44571dfe?action=share&source=collection_link&creator=25444643"
	},
	"item": [
		{
			"name": "pet",
			"item": [
				{
					"name": "status",
					"item": [
						{
							"name": "findByStatusAvailable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    console.log(\"Status code is: \" + pm.response.code + \" \" + pm.response.status);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"console.log(\"Content-Type is: \" + pm.response.headers.get(\"Content-Type\"));\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    expected_value = parseInt(pm.environment.get(\"EXPECTED_RESPONSE_TIME\"))\r",
											"    pm.expect(pm.response.responseTime).to.be.below(expected_value);;\r",
											"});\r",
											"console.log(\"Response time is: \" + pm.response.responseTime + \" ms\");\r",
											"\r",
											"if(pm.response.code === 200) \r",
											"{\r",
											"    \r",
											"pm.test(\"Each element in the array has the required properties\", function () {\r",
											"    pm.response.json().forEach(function (pet) {\r",
											"        pm.expect(pet).to.have.property('id');\r",
											"        pm.expect(pet).to.have.property('name');\r",
											"        pm.expect(pet).to.have.property('tags');\r",
											"        pm.expect(pet).to.have.property('status');\r",
											"    });\r",
											"\r",
											"    console.log(\"Response contains the required properties: id, category, name, photoUrls, tags and status!\");\r",
											"\r",
											"});\r",
											"} else \r",
											"{\r",
											"    console.warn(\"Unexpected status code: \" + pm.response.code + \" \" + pm.response.status);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/pet/findByStatus?status=available",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "findByStatusPending",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    console.log(\"Status code is: \" + pm.response.code + \" \" + pm.response.status);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"console.log(\"Content-Type is: \" + pm.response.headers.get(\"Content-Type\"));\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    expected_value = parseInt(pm.environment.get(\"EXPECTED_RESPONSE_TIME\"))\r",
											"    pm.expect(pm.response.responseTime).to.be.below(expected_value);;\r",
											"});\r",
											"console.log(\"Response time is: \" + pm.response.responseTime + \" ms\");\r",
											"\r",
											"if(pm.response.code === 200) \r",
											"{\r",
											"    pm.response.json().forEach(function (pet) {\r",
											"        pm.expect(pet).to.have.property('id');\r",
											"        pm.expect(pet).to.have.property('name');\r",
											"        pm.expect(pet).to.have.property('tags');\r",
											"        pm.expect(pet).to.have.property('status');\r",
											"    });\r",
											"\r",
											"    console.log(\"Response contains the required properties: id, category, name, photoUrls, tags and status!\");\r",
											"} else \r",
											"{\r",
											"    console.warn(\"Unexpected status code: \" + pm.response.code + \" \" + pm.response.status);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/pet/findByStatus?status=pending",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "pending"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "findByStatusSold",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    console.log(\"Status code is: \" + pm.response.code + \" \" + pm.response.status);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"console.log(\"Content-Type is: \" + pm.response.headers.get(\"Content-Type\"));\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    expected_value = parseInt(pm.environment.get(\"EXPECTED_RESPONSE_TIME\"))\r",
											"    pm.expect(pm.response.responseTime).to.be.below(expected_value);;\r",
											"});\r",
											"console.log(\"Response time is: \" + pm.response.responseTime + \" ms\");\r",
											"\r",
											"if(pm.response.code === 200) \r",
											"{\r",
											"   pm.response.json().forEach(function (pet) {\r",
											"        pm.expect(pet).to.have.property('id');\r",
											"        pm.expect(pet).to.have.property('name');\r",
											"        pm.expect(pet).to.have.property('tags');\r",
											"        pm.expect(pet).to.have.property('status');\r",
											"    });\r",
											"\r",
											"    console.log(\"Response contains the required properties: id, category, name, photoUrls, tags and status!\");\r",
											"        \r",
											"} else \r",
											"{\r",
											"    console.warn(\"Unexpected status code: \" + pm.response.code + \" \" + pm.response.status);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/pet/findByStatus?status=sold",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "sold"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "findByStatusInvalidStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 if not one of [available, pending, sold] \", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"console.log(\"Status code is: \" + pm.response.code + \" \" + pm.response.status);\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"console.log(\"Content-Type is: \" + pm.response.headers.get(\"Content-Type\"));\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    expected_value = parseInt(pm.environment.get(\"EXPECTED_RESPONSE_TIME\"))\r",
											"    pm.expect(pm.response.responseTime).to.be.below(expected_value);;\r",
											"});\r",
											"console.log(\"Response time is: \" + pm.response.responseTime + \" ms\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/pet/findByStatus?status=InvalidStatus",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "InvalidStatus"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "GET requests that finds pets by their status in the Swagger Petstore.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "addPet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"console.log(\"Status code is: \" + pm.response.code + \" \" + pm.response.status);\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"console.log(\"Content-Type is: \" + pm.response.headers.get(\"Content-Type\"));\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    expected_value = parseInt(pm.environment.get(\"EXPECTED_RESPONSE_TIME\"))\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expected_value);;\r",
									"});\r",
									"console.log(\"Response time is: \" + pm.response.responseTime + \" ms\");\r",
									"\r",
									"if(pm.response.code === 200) \r",
									"{\r",
									"    pm.test(\"Response body structure is valid\", function () {\r",
									"        var responseJSON = pm.response.json();\r",
									"        \r",
									"        // Check if the response contains the required properties\r",
									"        pm.expect(responseJSON).to.have.property('id');\r",
									"        pm.expect(responseJSON).to.have.property('category');\r",
									"        pm.expect(responseJSON).to.have.property('name');\r",
									"        pm.expect(responseJSON).to.have.property('photoUrls');\r",
									"        pm.expect(responseJSON).to.have.property('tags');\r",
									"        pm.expect(responseJSON).to.have.property('status');\r",
									"        console.log(\"Response contains the required properties: id, category, name, photoUrls, tags and status!\");\r",
									"\r",
									"        // Check the structure of the 'category' object\r",
									"        pm.expect(responseJSON.category).to.be.an('object').that.has.property('id');\r",
									"        pm.expect(responseJSON.category).to.be.an('object').that.has.property('name');\r",
									"        console.log(\"Response contains the required category objects: id and name!\");\r",
									"\r",
									"        // Check the structure of the 'tags' array\r",
									"        responseJSON.tags.forEach(function (tag) {\r",
									"            pm.expect(tag).to.be.an('object').that.has.property('id');\r",
									"            pm.expect(tag).to.be.an('object').that.has.property('name');\r",
									"            console.log(\"Response contains the required tags objects: id and name!\")\r",
									"        });\r",
									"\r",
									"        // Check the structure of the 'photoUrls' array\r",
									"        pm.expect(responseJSON.photoUrls).to.be.an('array');\r",
									"        console.log(\"Response contains the required photoUrls array!\")\r",
									"    });\r",
									"} else \r",
									"{\r",
									"    console.warn(\"Unexpected status code: \" + pm.response.code + \" \" + pm.response.status);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "special-key",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 100,\r\n  \"category\": {\r\n    \"id\": 100,\r\n    \"name\": \"Cat\"\r\n  },\r\n  \"name\": \"Telle\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 100,\r\n      \"name\": \"Cat\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/pet",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"pet"
							]
						},
						"description": "Adds pet with ID, category, name."
					},
					"response": [
						{
							"name": "addPet",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 100,\r\n  \"category\": {\r\n    \"id\": 100,\r\n    \"name\": \"Cat\"\r\n  },\r\n  \"name\": \"Telle\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 100,\r\n      \"name\": \"Cat\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/pet",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 08 Sep 2023 13:06:12 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PUT"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type, api_key, Authorization"
								},
								{
									"key": "Server",
									"value": "Jetty(9.2.9.v20150224)"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 100,\n    \"category\": {\n        \"id\": 100,\n        \"name\": \"Cat\"\n    },\n    \"name\": \"Telle\",\n    \"photoUrls\": [\n        \"string\"\n    ],\n    \"tags\": [\n        {\n            \"id\": 100,\n            \"name\": \"Cat\"\n        }\n    ],\n    \"status\": \"available\"\n}"
						}
					]
				},
				{
					"name": "updatePet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"    console.log(\"Status code is: \" + pm.response.code + \" \" + pm.response.status);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"console.log(\"Content-Type is: \" + pm.response.headers.get(\"Content-Type\"));\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    expected_value = parseInt(pm.environment.get(\"EXPECTED_RESPONSE_TIME\"))\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expected_value);;\r",
									"});\r",
									"console.log(\"Response time is: \" + pm.response.responseTime + \" ms\");\r",
									"\r",
									"if(pm.response.code === 200) \r",
									"{\r",
									"    pm.test(\"Response body structure is valid\", function () {\r",
									"        var responseJSON = pm.response.json();\r",
									"        \r",
									"        // Check if the response contains the required properties\r",
									"        pm.expect(responseJSON).to.have.property('id');\r",
									"        pm.expect(responseJSON).to.have.property('category');\r",
									"        pm.expect(responseJSON).to.have.property('name');\r",
									"        pm.expect(responseJSON).to.have.property('photoUrls');\r",
									"        pm.expect(responseJSON).to.have.property('tags');\r",
									"        pm.expect(responseJSON).to.have.property('status');\r",
									"        console.log(\"Response contains the required properties: id, category, name, photoUrls, tags and status!\");\r",
									"\r",
									"        // Check the structure of the 'category' object\r",
									"        pm.expect(responseJSON.category).to.be.an('object').that.has.property('id');\r",
									"        pm.expect(responseJSON.category).to.be.an('object').that.has.property('name');\r",
									"        console.log(\"Response contains the required category objects: id and name!\");\r",
									"\r",
									"        // Check the structure of the 'tags' array\r",
									"        responseJSON.tags.forEach(function (tag) {\r",
									"            pm.expect(tag).to.be.an('object').that.has.property('id');\r",
									"            pm.expect(tag).to.be.an('object').that.has.property('name');\r",
									"            console.log(\"Response contains the required tags objects: id and name!\")\r",
									"        });\r",
									"\r",
									"        // Check the structure of the 'photoUrls' array\r",
									"        pm.expect(responseJSON.photoUrls).to.be.an('array');\r",
									"        console.log(\"Response contains the required photoUrls array!\")\r",
									"    });\r",
									"} else \r",
									"{\r",
									"    console.warn(\"Unexpected status code: \" + pm.response.code + \" \" + pm.response.status);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"doggie\",\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/pet",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"pet"
							]
						},
						"description": "Updates existing pet with new ID, category and name"
					},
					"response": [
						{
							"name": "updatePet",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 0,\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"doggie\",\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/pet/100",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"pet",
										"100"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "xml",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 08 Sep 2023 13:33:24 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/xml"
								},
								{
									"key": "Content-Length",
									"value": "102"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PUT"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type, api_key, Authorization"
								},
								{
									"key": "Server",
									"value": "Jetty(9.2.9.v20150224)"
								}
							],
							"cookie": [],
							"body": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<apiResponse>\n    <type>unknown</type>\n</apiResponse>"
						}
					]
				},
				{
					"name": "findPetById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404])\r",
									"    console.log(\"Status code is: \" + pm.response.code + \" \" + pm.response.status);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"console.log(\"Content-Type is: \" + pm.response.headers.get(\"Content-Type\"));\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    expected_value = parseInt(pm.environment.get(\"EXPECTED_RESPONSE_TIME\"))\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expected_value);;\r",
									"});\r",
									"console.log(\"Response time is: \" + pm.response.responseTime + \" ms\");\r",
									"\r",
									"if(pm.response.code === 200) \r",
									"{\r",
									"    pm.test(\"Response body structure is valid\", function () {\r",
									"        var responseJSON = pm.response.json();\r",
									"        \r",
									"        // Check if the response contains the required properties\r",
									"        pm.expect(responseJSON).to.have.property('id');\r",
									"        pm.expect(responseJSON).to.have.property('category');\r",
									"        pm.expect(responseJSON).to.have.property('name');\r",
									"        pm.expect(responseJSON).to.have.property('photoUrls');\r",
									"        pm.expect(responseJSON).to.have.property('tags');\r",
									"        pm.expect(responseJSON).to.have.property('status');\r",
									"        console.log(\"Response contains the required properties: id, category, name, photoUrls, tags and status!\");\r",
									"\r",
									"        // Check the structure of the 'category' object\r",
									"        pm.expect(responseJSON.category).to.be.an('object').that.has.property('id');\r",
									"        pm.expect(responseJSON.category).to.be.an('object').that.has.property('name');\r",
									"        console.log(\"Response contains the required category objects: id and name!\");\r",
									"\r",
									"        // Check the structure of the 'tags' array\r",
									"        responseJSON.tags.forEach(function (tag) {\r",
									"            pm.expect(tag).to.be.an('object').that.has.property('id');\r",
									"            pm.expect(tag).to.be.an('object').that.has.property('name');\r",
									"            console.log(\"Response contains the required tags objects: id and name!\")\r",
									"        });\r",
									"\r",
									"        // Check the structure of the 'photoUrls' array\r",
									"        pm.expect(responseJSON.photoUrls).to.be.an('array');\r",
									"        console.log(\"Response contains the required photoUrls array!\")\r",
									"    });\r",
									"} else \r",
									"{\r",
									"    console.warn(\"Unexpected status code: \" + pm.response.code + \" \" + pm.response.status);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/pet/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"pet",
								"1"
							]
						},
						"description": "Finds pet with with ID"
					},
					"response": [
						{
							"name": "findPetById",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/pet/100",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"pet",
										"100"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 08 Sep 2023 13:33:14 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PUT"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type, api_key, Authorization"
								},
								{
									"key": "Server",
									"value": "Jetty(9.2.9.v20150224)"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 100,\n    \"category\": {\n        \"id\": 100,\n        \"name\": \"Cat\"\n    },\n    \"name\": \"Telle\",\n    \"photoUrls\": [\n        \"string\"\n    ],\n    \"tags\": [\n        {\n            \"id\": 100,\n            \"name\": \"Cat\"\n        }\n    ],\n    \"status\": \"available\"\n}"
						}
					]
				},
				{
					"name": "updatePetFormData",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"    console.log(\"Status code is: \" + pm.response.code + \" \" + pm.response.status);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"console.log(\"Content-Type is: \" + pm.response.headers.get(\"Content-Type\"));\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    expected_value = parseInt(pm.environment.get(\"EXPECTED_RESPONSE_TIME\"))\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expected_value);;\r",
									"});\r",
									"console.log(\"Response time is: \" + pm.response.responseTime + \" ms\");\r",
									"\r",
									"if(pm.response.code === 200) \r",
									"{\r",
									"    pm.test(\"Response body structure is valid\", function () {\r",
									"        var responseJSON = pm.response.json();\r",
									"        \r",
									"        // Check if the response contains the required properties\r",
									"        pm.expect(responseJSON).to.have.property('code');\r",
									"        pm.expect(responseJSON).to.have.property('type');\r",
									"        pm.expect(responseJSON).to.have.property('message');\r",
									"\r",
									"        console.log(\"Response contains the required properties: code, type, message!\");\r",
									"\r",
									"    });\r",
									"} else \r",
									"{\r",
									"    console.warn(\"Unexpected status code: \" + pm.response.code + \" \" + pm.response.status);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "PellePlutt",
									"type": "text"
								},
								{
									"key": "status",
									"value": "DEAD",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BASE_URL}}/pet/100",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"pet",
								"100"
							]
						},
						"description": "Updates name and status of pet using a form"
					},
					"response": [
						{
							"name": "updatePetFormData",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "PellePlutt",
											"type": "text"
										},
										{
											"key": "status",
											"value": "DEAD",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{BASE_URL}}/pet/100",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"pet",
										"100"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 08 Sep 2023 13:40:53 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PUT"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type, api_key, Authorization"
								},
								{
									"key": "Server",
									"value": "Jetty(9.2.9.v20150224)"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": 200,\n    \"type\": \"unknown\",\n    \"message\": \"100\"\n}"
						}
					]
				},
				{
					"name": "deletePet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
									"    console.log(\"Status code is: \" + pm.response.code + \" \" + pm.response.status);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    expected_value = parseInt(pm.environment.get(\"EXPECTED_RESPONSE_TIME\"))\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expected_value);;\r",
									"});\r",
									"console.log(\"Response time is: \" + pm.response.responseTime + \" ms\");\r",
									"\r",
									"if(pm.response.code === 200) \r",
									"{\r",
									"    \r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"    console.log(\"Content-Type is: \" + pm.response.headers.get(\"Content-Type\"));\r",
									"\r",
									"    pm.test(\"Response body structure is valid\", function () {\r",
									"        var responseJSON = pm.response.json();\r",
									"        \r",
									"             // Check if the response contains the required properties\r",
									"        pm.expect(responseJSON).to.have.property('code');\r",
									"        pm.expect(responseJSON).to.have.property('type');\r",
									"        pm.expect(responseJSON).to.have.property('message');\r",
									"\r",
									"        console.log(\"Response contains the required properties: code, type, message!\");\r",
									"    });\r",
									"} else \r",
									"{\r",
									"    console.warn(\"Unexpected status code: \" + pm.response.code + \" \" + pm.response.status);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "special-key",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/pet/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"pet",
								"1"
							]
						},
						"description": "Deletes a pet"
					},
					"response": [
						{
							"name": "deletePet",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/pet/100",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"pet",
										"100"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 08 Sep 2023 13:42:58 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PUT"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type, api_key, Authorization"
								},
								{
									"key": "Server",
									"value": "Jetty(9.2.9.v20150224)"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": 200,\n    \"type\": \"unknown\",\n    \"message\": \"100\"\n}"
						}
					]
				}
			],
			"description": "Requests in the /pet/ path"
		},
		{
			"name": "store",
			"item": [
				{
					"name": "deleteOrder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,404]);\r",
									"    console.log(\"Status code is: \" + pm.response.code + \" \" + pm.response.status);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"console.log(\"Content-Type is: \" + pm.response.headers.get(\"Content-Type\"));\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    expected_value = parseInt(pm.environment.get(\"EXPECTED_RESPONSE_TIME\"))\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expected_value);;\r",
									"});\r",
									"console.log(\"Response time is: \" + pm.response.responseTime + \" ms\");\r",
									"\r",
									"if(pm.response.code === 200 | 404) \r",
									"{\r",
									"    pm.test(\"Response body structure is valid\", function () {\r",
									"        var responseJSON = pm.response.json();\r",
									"        \r",
									"        // Check if the response contains the required properties\r",
									"        pm.expect(responseJSON).to.have.property('code');\r",
									"        pm.expect(responseJSON).to.have.property('type');\r",
									"        pm.expect(responseJSON).to.have.property('message');\r",
									"        console.log(\"Response contains the required properties: code, type and message!\");\r",
									"    });\r",
									"} else \r",
									"{\r",
									"    console.warn(\"Unexpected status code: \" + pm.response.code + \" \" + pm.response.status);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "api_key",
								"value": "special-key",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/store/order/1234567891011121314",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"store",
								"order",
								"1234567891011121314"
							]
						},
						"description": "Deletes an order by ID"
					},
					"response": [
						{
							"name": "deleteOrder",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/store/order/123456789101112131",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"store",
										"order",
										"123456789101112131"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 08 Sep 2023 13:44:40 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PUT"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type, api_key, Authorization"
								},
								{
									"key": "Server",
									"value": "Jetty(9.2.9.v20150224)"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": 404,\n    \"type\": \"unknown\",\n    \"message\": \"Order Not Found\"\n}"
						}
					]
				},
				{
					"name": "orderPet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"    console.log(\"Status code is: \" + pm.response.code + \" \" + pm.response.status);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"console.log(\"Content-Type is: \" + pm.response.headers.get(\"Content-Type\"));\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    expected_value = parseInt(pm.environment.get(\"EXPECTED_RESPONSE_TIME\"))\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expected_value);;\r",
									"});\r",
									"console.log(\"Response time is: \" + pm.response.responseTime + \" ms\");\r",
									"\r",
									"if(pm.response.code === 200 | 201) \r",
									"{\r",
									"    pm.test(\"Response body structure is valid\", function () {\r",
									"        var responseJSON = pm.response.json();\r",
									"        \r",
									"        // Check if the response contains the required properties\r",
									"        pm.expect(responseJSON).to.have.property('id');\r",
									"        pm.expect(responseJSON).to.have.property('petId');\r",
									"        pm.expect(responseJSON).to.have.property('quantity');\r",
									"        pm.expect(responseJSON).to.have.property('shipDate');\r",
									"        pm.expect(responseJSON).to.have.property('status');\r",
									"        pm.expect(responseJSON).to.have.property('complete');\r",
									"        console.log(\"Response contains the required properties: id, petId, quantity, shipDate, status and complete!\");\r",
									"    });\r",
									"} else \r",
									"{\r",
									"    console.warn(\"Unexpected status code: \" + pm.response.code + \" \" + pm.response.status);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 1234567891011121314,\r\n  \"petId\": 100,\r\n  \"quantity\": 1,\r\n  \"shipDate\": \"2023-09-06T12:21:51.004Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/store/order",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"store",
								"order"
							]
						},
						"description": "Places an order for a pet"
					},
					"response": [
						{
							"name": "orderPet",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 1234567891011121314,\r\n  \"petId\": 100,\r\n  \"quantity\": 1,\r\n  \"shipDate\": \"2023-09-06T12:21:51.004Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/store/order",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 08 Sep 2023 13:47:52 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PUT"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type, api_key, Authorization"
								},
								{
									"key": "Server",
									"value": "Jetty(9.2.9.v20150224)"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1234567891011121314,\n    \"petId\": 100,\n    \"quantity\": 1,\n    \"shipDate\": \"2023-09-06T12:21:51.004+0000\",\n    \"status\": \"placed\",\n    \"complete\": true\n}"
						}
					]
				},
				{
					"name": "getOrderById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Status code is: \" + pm.response.code + \" \" + pm.response.status);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"console.log(\"Content-Type is: \" + pm.response.headers.get(\"Content-Type\"));\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    expected_value = parseInt(pm.environment.get(\"EXPECTED_RESPONSE_TIME\"))\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expected_value);;\r",
									"});\r",
									"console.log(\"Response time is: \" + pm.response.responseTime + \" ms\");\r",
									"\r",
									"if(pm.response.code === 200) \r",
									"{\r",
									"    pm.test(\"Response body structure is valid\", function () {\r",
									"        var responseJSON = pm.response.json();\r",
									"        \r",
									"        // Check if the response contains the required properties\r",
									"        pm.expect(responseJSON).to.have.property('id');\r",
									"        pm.expect(responseJSON).to.have.property('petId');\r",
									"        pm.expect(responseJSON).to.have.property('quantity');\r",
									"        pm.expect(responseJSON).to.have.property('shipDate');\r",
									"        pm.expect(responseJSON).to.have.property('status');\r",
									"        pm.expect(responseJSON).to.have.property('complete');\r",
									"        console.log(\"Response contains the required properties: id, petId, quantity, shipDate, status and complete!\");\r",
									"    });\r",
									"} else \r",
									"{\r",
									"    console.warn(\"Unexpected status code: \" + pm.response.code + \" \" + pm.response.status);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/store/order/1234567891011121314",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"store",
								"order",
								"1234567891011121314"
							]
						},
						"description": "Find order by ID"
					},
					"response": [
						{
							"name": "getOrderById",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/store/order/1234567891011121314",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"store",
										"order",
										"1234567891011121314"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 08 Sep 2023 13:49:07 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PUT"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type, api_key, Authorization"
								},
								{
									"key": "Server",
									"value": "Jetty(9.2.9.v20150224)"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1234567891011121314,\n    \"petId\": 100,\n    \"quantity\": 1,\n    \"shipDate\": \"2023-09-06T12:21:51.004+0000\",\n    \"status\": \"placed\",\n    \"complete\": true\n}"
						}
					]
				},
				{
					"name": "getInventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Status code is: \" + pm.response.code + \" \" + pm.response.status);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"console.log(\"Content-Type is: \" + pm.response.headers.get(\"Content-Type\"));\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    expected_value = parseInt(pm.environment.get(\"EXPECTED_RESPONSE_TIME\"))\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expected_value);;\r",
									"});\r",
									"console.log(\"Response time is: \" + pm.response.responseTime + \" ms\");\r",
									"\r",
									"if(pm.response.code === 200) \r",
									"{\r",
									"    pm.test(\"Response body structure is valid\", function () {\r",
									"        var responseJSON = pm.response.json();\r",
									"        \r",
									"        // Check if the response contains the required properties\r",
									"        pm.expect(responseJSON).to.have.property('available');\r",
									"        pm.expect(responseJSON).to.have.property('pending');\r",
									"        pm.expect(responseJSON).to.have.property('sold');\r",
									"        console.log(\"Response contains the required properties: available, pending and sold!\");\r",
									"    });\r",
									"} else \r",
									"{\r",
									"    console.warn(\"Unexpected status code: \" + pm.response.code + \" \" + pm.response.status);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/store/inventory",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"store",
								"inventory"
							]
						},
						"description": "Gets information about store inventory"
					},
					"response": [
						{
							"name": "getInventory",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/store/inventory",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"store",
										"inventory"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 08 Sep 2023 13:52:10 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PUT"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type, api_key, Authorization"
								},
								{
									"key": "Server",
									"value": "Jetty(9.2.9.v20150224)"
								}
							],
							"cookie": [],
							"body": "{\n    \"sold\": 20,\n    \"EVOMASTER\": 1,\n    \"string\": 209,\n    \"waiting\": 1,\n    \"test\": 1,\n    \"alive\": 2,\n    \"unavailable\": 5,\n    \"pending\": 9,\n    \"available\": 710,\n    \"avaliable\": 5,\n    \"working\": 1,\n    \"Available\": 1,\n    \"ва\": 1\n}"
						}
					]
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "createUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Status code is: \" + pm.response.code + \" \" + pm.response.status);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"console.log(\"Content-Type is: \" + pm.response.headers.get(\"Content-Type\"));\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    expected_value = parseInt(pm.environment.get(\"EXPECTED_RESPONSE_TIME\"))\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expected_value);;\r",
									"});\r",
									"console.log(\"Response time is: \" + pm.response.responseTime + \" ms\");\r",
									"\r",
									"if(pm.response.code === 200) \r",
									"{\r",
									"    pm.test(\"Response body structure is valid\", function () {\r",
									"        var responseJSON = pm.response.json();\r",
									"        \r",
									"        // Check if the response contains the required properties\r",
									"        pm.expect(responseJSON).to.have.property('code');\r",
									"        pm.expect(responseJSON).to.have.property('type');\r",
									"        pm.expect(responseJSON).to.have.property('message');\r",
									"\r",
									"        console.log(\"Response contains the required properties.\");\r",
									"\r",
									"    });\r",
									"} else \r",
									"{\r",
									"    console.warn(\"Unexpected status code: \" + pm.response.code + \" \" + pm.response.status);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"ville\",\r\n  \"firstName\": \"Ville\",\r\n  \"lastName\": \"Gillstrom\",\r\n  \"email\": \"ville.asd@gmail.com\",\r\n  \"password\": \"123\",\r\n  \"phone\": \"848475\",\r\n  \"userStatus\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/user",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user"
							]
						},
						"description": "Creates a user with relevant information"
					},
					"response": [
						{
							"name": "createUser",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"ville\",\r\n  \"firstName\": \"Ville\",\r\n  \"lastName\": \"Gillstrom\",\r\n  \"email\": \"ville.asd@gmail.com\",\r\n  \"password\": \"123\",\r\n  \"phone\": \"848475\",\r\n  \"userStatus\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/user",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 08 Sep 2023 13:53:05 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PUT"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type, api_key, Authorization"
								},
								{
									"key": "Server",
									"value": "Jetty(9.2.9.v20150224)"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": 200,\n    \"type\": \"unknown\",\n    \"message\": \"9223372036854775807\"\n}"
						}
					]
				},
				{
					"name": "findUserByName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Status code is: \" + pm.response.code + \" \" + pm.response.status);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"console.log(\"Content-Type is: \" + pm.response.headers.get(\"Content-Type\"));\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    expected_value = parseInt(pm.environment.get(\"EXPECTED_RESPONSE_TIME\"))\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expected_value);;\r",
									"});\r",
									"console.log(\"Response time is: \" + pm.response.responseTime + \" ms\");\r",
									"\r",
									"if(pm.response.code === 200) \r",
									"{\r",
									"    pm.test(\"Response body structure is valid\", function () {\r",
									"        var responseJSON = pm.response.json();\r",
									"        \r",
									"        // Check if the response contains the required properties\r",
									"        pm.expect(responseJSON).to.have.property('id');\r",
									"        pm.expect(responseJSON).to.have.property('username');\r",
									"        pm.expect(responseJSON).to.have.property('firstName');\r",
									"        pm.expect(responseJSON).to.have.property('lastName');\r",
									"        pm.expect(responseJSON).to.have.property('email');\r",
									"        pm.expect(responseJSON).to.have.property('password');\r",
									"        pm.expect(responseJSON).to.have.property('phone');\r",
									"        console.log(\"Response contains the required properties!\");\r",
									"\r",
									"    });\r",
									"} else \r",
									"{\r",
									"    console.warn(\"Unexpected status code: \" + pm.response.code + \" \" + pm.response.status);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/user/ville",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user",
								"ville"
							]
						},
						"description": "Finds user by username"
					},
					"response": [
						{
							"name": "findUserByName",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/user/ville",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user",
										"ville"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 08 Sep 2023 13:54:25 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PUT"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type, api_key, Authorization"
								},
								{
									"key": "Server",
									"value": "Jetty(9.2.9.v20150224)"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 9223372036854775807,\n    \"username\": \"ville\",\n    \"firstName\": \"Ville\",\n    \"lastName\": \"Gillstrom\",\n    \"email\": \"ville.asd@gmail.com\",\n    \"password\": \"123\",\n    \"phone\": \"848475\",\n    \"userStatus\": 0\n}"
						}
					]
				},
				{
					"name": "updateExistingUserInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Status code is: \" + pm.response.code + \" \" + pm.response.status);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"console.log(\"Content-Type is: \" + pm.response.headers.get(\"Content-Type\"));\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    expected_value = parseInt(pm.environment.get(\"EXPECTED_RESPONSE_TIME\"))\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expected_value);;\r",
									"});\r",
									"console.log(\"Response time is: \" + pm.response.responseTime + \" ms\");\r",
									"\r",
									"if(pm.response.code === 200) \r",
									"{\r",
									"    pm.test(\"Response body structure is valid\", function () {\r",
									"        var responseJSON = pm.response.json();\r",
									"        \r",
									"        // Check if the response contains the required properties\r",
									"        pm.expect(responseJSON).to.have.property('code');\r",
									"        pm.expect(responseJSON).to.have.property('type');\r",
									"        pm.expect(responseJSON).to.have.property('message');\r",
									"\r",
									"        console.log(\"Response contains the required properties: code, type,message.\");\r",
									"\r",
									"\r",
									"    });\r",
									"} else \r",
									"{\r",
									"    console.warn(\"Unexpected status code: \" + pm.response.code + \" \" + pm.response.status);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"ville\",\r\n  \"firstName\": \"David\",\r\n  \"lastName\": \"Pascua\",\r\n  \"email\": \"david@hotmail.com\",\r\n  \"password\": \"hejsan123\",\r\n  \"phone\": \"0700000000\",\r\n  \"userStatus\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/user/ville",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user",
								"ville"
							]
						},
						"description": "updates information about a user"
					},
					"response": [
						{
							"name": "updateExistingUserInfo",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"ville\",\r\n  \"firstName\": \"David\",\r\n  \"lastName\": \"Pascua\",\r\n  \"email\": \"david@hotmail.com\",\r\n  \"password\": \"hejsan123\",\r\n  \"phone\": \"0700000000\",\r\n  \"userStatus\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/user/ville",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user",
										"ville"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 08 Sep 2023 13:55:01 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PUT"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type, api_key, Authorization"
								},
								{
									"key": "Server",
									"value": "Jetty(9.2.9.v20150224)"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": 200,\n    \"type\": \"unknown\",\n    \"message\": \"9223372036854775807\"\n}"
						}
					]
				},
				{
					"name": "loginUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Status code is: \" + pm.response.code + \" \" + pm.response.status);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"console.log(\"Content-Type is: \" + pm.response.headers.get(\"Content-Type\"));\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    expected_value = parseInt(pm.environment.get(\"EXPECTED_RESPONSE_TIME\"))\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expected_value);;\r",
									"});\r",
									"console.log(\"Response time is: \" + pm.response.responseTime + \" ms\");\r",
									"\r",
									"if(pm.response.code === 200) \r",
									"{\r",
									"    pm.test(\"Response body structure is valid\", function () {\r",
									"        var responseJSON = pm.response.json();\r",
									"             // Check if the response contains the required properties\r",
									"        pm.expect(responseJSON).to.have.property('code');\r",
									"        pm.expect(responseJSON).to.have.property('type');\r",
									"        pm.expect(responseJSON).to.have.property('message');\r",
									"\r",
									"        console.log(\"Response contains the required properties: code, type,message.\");\r",
									"    });\r",
									"} else \r",
									"{\r",
									"    console.warn(\"Unexpected status code: \" + pm.response.code + \" \" + pm.response.status);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/user/login?username=ville&password=123",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "ville"
								},
								{
									"key": "password",
									"value": "123"
								}
							]
						},
						"description": "Logs user into the system"
					},
					"response": [
						{
							"name": "loginUser",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/user/login?username=ville&password=123",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "ville"
										},
										{
											"key": "password",
											"value": "123"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 08 Sep 2023 13:55:44 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PUT"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type, api_key, Authorization"
								},
								{
									"key": "X-Expires-After",
									"value": "Fri Sep 08 14:55:44 UTC 2023"
								},
								{
									"key": "X-Rate-Limit",
									"value": "5000"
								},
								{
									"key": "Server",
									"value": "Jetty(9.2.9.v20150224)"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": 200,\n    \"type\": \"unknown\",\n    \"message\": \"logged in user session:1694181344742\"\n}"
						}
					]
				},
				{
					"name": "logoutUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Status code is: \" + pm.response.code + \" \" + pm.response.status);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"console.log(\"Content-Type is: \" + pm.response.headers.get(\"Content-Type\"));\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    expected_value = parseInt(pm.environment.get(\"EXPECTED_RESPONSE_TIME\"))\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expected_value);;\r",
									"});\r",
									"console.log(\"Response time is: \" + pm.response.responseTime + \" ms\");\r",
									"\r",
									"if(pm.response.code === 200) \r",
									"{\r",
									"    pm.test(\"Response body structure is valid\", function () {\r",
									"        var responseJSON = pm.response.json();\r",
									"        \r",
									"             // Check if the response contains the required properties\r",
									"        pm.expect(responseJSON).to.have.property('code');\r",
									"        pm.expect(responseJSON).to.have.property('type');\r",
									"        pm.expect(responseJSON).to.have.property('message');\r",
									"\r",
									"        console.log(\"Response contains the required properties: code, type,message.\");\r",
									"    });\r",
									"} else \r",
									"{\r",
									"    console.warn(\"Unexpected status code: \" + pm.response.code + \" \" + pm.response.status);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/user/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user",
								"logout"
							]
						},
						"description": "Logs out user from the system"
					},
					"response": [
						{
							"name": "logoutUser",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/user/logout",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user",
										"logout"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 08 Sep 2023 13:56:25 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PUT"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type, api_key, Authorization"
								},
								{
									"key": "Server",
									"value": "Jetty(9.2.9.v20150224)"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": 200,\n    \"type\": \"unknown\",\n    \"message\": \"ok\"\n}"
						}
					]
				},
				{
					"name": "removeUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Status code is: \" + pm.response.code + \" \" + pm.response.status);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"console.log(\"Content-Type is: \" + pm.response.headers.get(\"Content-Type\"));\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    expected_value = parseInt(pm.environment.get(\"EXPECTED_RESPONSE_TIME\"))\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expected_value);;\r",
									"});\r",
									"console.log(\"Response time is: \" + pm.response.responseTime + \" ms\");\r",
									"\r",
									"if(pm.response.code === 200) \r",
									"{\r",
									"    pm.test(\"Response body structure is valid\", function () {\r",
									"        var responseJSON = pm.response.json();\r",
									"        \r",
									"        // Check if the response contains the required properties\r",
									"        pm.expect(responseJSON).to.have.property('code');\r",
									"        pm.expect(responseJSON).to.have.property('type');\r",
									"        pm.expect(responseJSON).to.have.property('message');\r",
									"        console.log(\"Response contains the required properties: code, type, message!\");\r",
									"    });\r",
									"} else \r",
									"{\r",
									"    console.warn(\"Unexpected status code: \" + pm.response.code + \" \" + pm.response.status);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/user/ville",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user",
								"ville"
							]
						},
						"description": "Deletes user"
					},
					"response": [
						{
							"name": "removeUser",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/user/ville",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"user",
										"ville"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 08 Sep 2023 13:56:53 GMT"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, POST, DELETE, PUT"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Content-Type, api_key, Authorization"
								},
								{
									"key": "Server",
									"value": "Jetty(9.2.9.v20150224)"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}